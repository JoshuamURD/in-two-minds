---
import { getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const essays = await getCollection('essays');
  return essays.map(essay => ({
    params: { slug: essay.id.replace(/\.md$/, '').toLowerCase().replace(/\s+/g, '-') },
    props: { essay },
  }));
}

// Utility functions
const extractTextFromMarkdownLink = (markdownLink: string) => {
  const match = markdownLink.match(/\[(.*?)\]/);
  return match ? match[1] : markdownLink;
};

const calculateReadingTime = (content: string): { wordCount: number; readingTime: number } => {
  if (!content) return { wordCount: 0, readingTime: 0 };
  const wordsPerMinute = 200;
  const wordCount = content.trim().split(/\s+/).length;
  return { 
    wordCount, 
    readingTime: Math.ceil(wordCount / wordsPerMinute) 
  };
};

// Component props and data
const { essay } = Astro.props;
const { Content, headings } = await render(essay);
const { wordCount, readingTime } = calculateReadingTime(essay.body ?? '');

// Get table of contents from headings
const tableOfContents = headings
  .filter(heading => heading.depth <= 3)
  .map(heading => ({
    ...heading,
    slug: heading.slug,
    indent: `ml-${(heading.depth - 1) * 4}`
  }));

let readingProgress = 0;
---

<BaseLayout title={`${essay.data.title} - Essay`}>
  <div class="max-w-[120rem] mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Essay Header -->
    <header class="mt-16 lg:mt-24 mb-12 lg:mb-16 max-w-4xl mx-auto">
      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">
        <time 
          datetime={essay.data.date.toISOString()}
          class="font-mono text-xs text-gray-600"
        >
          {essay.data.date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        <span class="font-mono text-xs text-gray-600">
          {essay.id.split('/')[0]} â€¢ {readingTime} min read
        </span>
      </div>

      <div class="space-y-8 border-y border-gray-200 py-12">
        <h1 class="font-serif text-4xl sm:text-5xl lg:text-6xl leading-tight">
          {essay.data.title}
        </h1>
        {essay.data.summary && (
          <p class="text-lg sm:text-xl leading-relaxed text-gray-700">
            {essay.data.summary}
          </p>
        )}
        <div class="font-mono text-sm text-gray-600">
          By {essay.data.persona}
        </div>
      </div>
    </header>

    <!-- Mobile Topics (visible on mobile/tablet) -->
    <div class="lg:hidden mb-12 max-w-4xl mx-auto">
      {essay.data.topics?.length > 0 && (
        <div class="space-y-4">
          <h2 class="font-mono text-xs uppercase tracking-widest text-gray-600">
            Topics
          </h2>
          <div class="flex flex-wrap gap-2">
            {essay.data.topics.map(topic => (
              <a 
                href={`/topics/${extractTextFromMarkdownLink(topic).toLowerCase().replace(/\s+/g, '-')}`}
                class="font-mono text-xs px-3 py-1.5 border border-gray-200 
                       hover:bg-gray-50 transition-colors rounded-sm"
              >
                {extractTextFromMarkdownLink(topic)}
              </a>
            ))}
          </div>
        </div>
      )}
    </div>

    <!-- Main Content Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-12 xl:gap-16">
      <!-- Left Sidebar -->
      <aside class="hidden lg:block lg:col-span-3">
        <div class="sticky top-8 space-y-16">
          {essay.data.topics?.length > 0 && (
            <nav class="space-y-6">
              <h2 class="font-mono text-xs uppercase tracking-widest text-gray-600">
                Topics
              </h2>
              <div class="flex flex-col gap-3">
                {essay.data.topics.map(topic => (
                  <a 
                    href={`/topics/${extractTextFromMarkdownLink(topic).toLowerCase().replace(/\s+/g, '-')}`}
                    class="font-mono text-xs px-3 py-1.5 border border-gray-200 hover:bg-gray-50 
                           transition-colors rounded-sm"
                  >
                    {extractTextFromMarkdownLink(topic)}
                  </a>
                ))}
              </div>
            </nav>
          )}
        </div>
      </aside>

      <!-- Main Content -->
      <article class="lg:col-span-7">
        <div class="prose prose-lg sm:prose-xl prose-stone max-w-none">
          <Content />
        </div>
      </article>

      <!-- Right Sidebar -->
      <aside class="hidden lg:block lg:col-span-2">
        <div class="sticky top-8 space-y-16">
          {tableOfContents.length > 0 && (
            <nav class="space-y-6">
              <button 
                id="toc-toggle"
                class="group w-full flex items-center justify-between font-mono text-xs uppercase tracking-widest text-gray-600 hover:text-gray-900"
              >
                <div class="flex items-center gap-2">
                  <svg 
                    class="w-3 h-3 transform transition-transform duration-200 rotate-0 group-aria-expanded:rotate-90" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                    aria-hidden="true"
                  >
                    <path 
                      stroke-linecap="round" 
                      stroke-linejoin="round" 
                      stroke-width="2" 
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                  <span>Contents</span>
                </div>
                <span class="text-gray-400 text-[10px]">({tableOfContents.length})</span>
              </button>
              <div 
                id="toc-content" 
                class="hidden space-y-4 pl-5 border-l border-gray-200"
              >
                {tableOfContents.map(heading => (
                  <a 
                    href={`#${heading.slug}`}
                    class={`block font-mono text-xs text-gray-600 hover:text-gray-900 
                           transition-colors ${heading.indent}`}
                  >
                    {heading.text}
                  </a>
                ))}
              </div>
            </nav>
          )}

          {essay.data.related?.length > 0 && (
            <div>
              <h2 class="font-mono text-xs uppercase tracking-widest mb-4 text-gray-600">
                Related Essays
              </h2>
              <div class="space-y-3">
                {essay.data.related.map(title => (
                  <p class="font-mono text-sm text-gray-600 hover:text-gray-900 transition-colors">
                    {title}
                  </p>
                ))}
              </div>
            </div>
          )}
        </div>
      </aside>
    </div>

    <!-- Mobile Related Essays (visible on mobile/tablet) -->
    <div class="lg:hidden mt-16 max-w-4xl mx-auto">
      {essay.data.related?.length > 0 && (
        <div class="border-t border-gray-200 pt-8">
          <h2 class="font-mono text-xs uppercase tracking-widest mb-4 text-gray-600">
            Related Essays
          </h2>
          <div class="space-y-3">
            {essay.data.related.map(title => (
              <p class="font-mono text-sm text-gray-600">{title}</p>
            ))}
          </div>
        </div>
      )}
    </div>

    <!-- Footer with increased max width -->
    <footer class="mt-24 lg:mt-32 mb-16 max-w-4xl mx-auto space-y-12">
      {essay.data.sources?.length > 0 && (
        <div class="border-t border-gray-200 pt-12">
          <h2 class="font-mono text-xs uppercase tracking-widest mb-6 text-gray-600">
            Sources & References
          </h2>
          <div class="space-y-3">
            {essay.data.sources.map(source => (
              <p class="font-mono text-sm text-gray-600">{source}</p>
            ))}
          </div>
        </div>
      )}

      <div class="border-t border-gray-200 pt-12 text-center">
        <p class="font-mono text-xs text-gray-600">
          From the digital garden of {essay.data.persona}
        </p>
      </div>
    </footer>
  </div>
</BaseLayout>

<script>
  const tocToggle = document.getElementById('toc-toggle');
  const tocContent = document.getElementById('toc-content');

  tocToggle?.addEventListener('click', () => {
    const isExpanded = tocToggle.getAttribute('aria-expanded') === 'true';
    tocToggle.setAttribute('aria-expanded', (!isExpanded).toString());
    tocContent?.classList.toggle('hidden');
  });

  // Initialize button state
  tocToggle?.setAttribute('aria-expanded', 'false');

  // Close ToC when clicking a link
  tocContent?.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
      tocContent.classList.add('hidden');
      tocToggle?.setAttribute('aria-expanded', 'false');
    });
  });
</script>

<style is:global>
  .prose {
    --tw-prose-body: theme('colors.gray.700');
    --tw-prose-headings: theme('colors.gray.900');
    --tw-prose-links: theme('colors.gray.900');
    --tw-prose-bold: theme('colors.gray.900');
    --tw-prose-counters: theme('colors.gray.500');
    --tw-prose-bullets: theme('colors.gray.500');
    --tw-prose-quotes: theme('colors.gray.900');
    --tw-prose-code: theme('colors.gray.900');
    --tw-prose-hr: theme('colors.gray.200');
    --tw-prose-quote-borders: theme('colors.gray.200');
    max-width: none;
  }

  .prose :where(p, ul, ol) {
    @apply leading-relaxed mb-6;
  }

  .prose :where(h1, h2, h3, h4) {
    @apply font-serif font-normal tracking-tight mt-12 mb-6 scroll-mt-16;
  }

  .prose :where(h2) {
    @apply text-3xl sm:text-4xl;
  }

  .prose :where(h3) {
    @apply text-2xl sm:text-3xl;
  }

  .prose :where(a) {
    @apply no-underline border-b border-gray-300 transition-colors hover:border-gray-600;
  }

  .prose :where(code):not(:where(pre code)) {
    @apply font-mono text-sm bg-gray-100 px-2 py-0.5 rounded;
  }

  .prose :where(pre) {
    @apply bg-gray-900 text-white overflow-x-auto font-mono text-sm leading-relaxed 
           my-8 rounded-md p-4;
  }

  .prose :where(blockquote) {
    @apply font-serif italic border-l-2 pl-6 text-gray-600 my-8;
  }

  .prose :where(figure) {
    @apply my-8;
  }

  .prose :where(figure figcaption) {
    @apply font-mono text-sm text-gray-600 mt-4;
  }

  .prose :where(img) {
    @apply rounded-md shadow-sm my-8;
  }

  @media (min-width: 1280px) {
    .prose {
      font-size: 1.125rem;
      line-height: 1.8;
    }
  }

  @media (min-width: 1536px) {
    .prose {
      font-size: 1.1875rem;
      line-height: 1.85;
    }
  }

  .topic-button {
    @apply font-mono text-xs px-3 py-1.5 border border-gray-200 
           hover:bg-gray-50 transition-colors rounded-sm
           whitespace-normal break-words max-w-[200px] inline-block;
  }
</style>